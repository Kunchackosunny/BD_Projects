# -*- coding: utf-8 -*-
"""Loan_approval_ALL_AlGORITHM_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10dJSaIBca3Inu5ytbFVUzG_nCkI78L41
"""

import pandas as pd
import numpy as np
df=pd.read_csv('/content/LoanApprovalPrediction.csv')
df

df.head()

df.tail()

df.dtypes

df.columns

df.isna().sum()

df.drop(['Loan_ID'],axis=1,inplace=True)

df

df.isna().sum()

x=df['Gender'].mode()[0]
df['Gender'].fillna(x,inplace=True)
x=df['Married'].mode()[0]
df['Married'].fillna(x,inplace=True)
x=df['Dependents'].mode()[0]
df['Dependents'].fillna(x,inplace=True)
x=df['Self_Employed'].mode()[0]
df['Self_Employed'].fillna(x,inplace=True)
x=df['LoanAmount'].mean()
df['LoanAmount'].fillna(x,inplace=True)
x=df['Loan_Amount_Term'].mean()
df['Loan_Amount_Term'].fillna(x,inplace=True)
x=df['Credit_History'].mean()
df['Credit_History'].fillna(x,inplace=True)

df.isna().sum()

df.dtypes

from sklearn.preprocessing import LabelEncoder
lab=LabelEncoder()
df['Gender']=lab.fit_transform(df['Gender'])

df['Married']=lab.fit_transform(df['Married'])

df['Property_Area']=lab.fit_transform(df['Property_Area'])

df['Self_Employed']=lab.fit_transform(df['Self_Employed'])

df['Dependents']=lab.fit_transform(df['Dependents'])

df['Education']=lab.fit_transform(df['Education'])

df

x=df.iloc[:,:-1].values
x

y=df.iloc[:,-1].values
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=42)
x_train

x_test

y_train

y_test

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit(x_train)
x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)
x_train

from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import BernoulliNB
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix,accuracy_score
knn=KNeighborsClassifier(n_neighbors=7)
base=BernoulliNB()
svm_model=SVC()
lst=[knn,base,svm_model]

for i in lst:
  print("model name is ,",i)
  i.fit(x_train,y_train)
  print("prediction value is ...")
  y_pred=i.predict(x_test)
  print(y_pred)
  print("confusion matrix is")
  cmd=confusion_matrix(y_test,y_pred)
  print(cmd)
  print("accuracy score is...")
  print(accuracy_score(y_test,y_pred))

'''from sklearn.metrics import ConfusionMatrixDisplay
lab=['Y','N']
cmd1=ConfusionMatrixDisplay(cmd,display_labels=lab)
cmd1.plot()'''

from sklearn.metrics import classification_report
report=classification_report(y_test,y_pred)
print(report)